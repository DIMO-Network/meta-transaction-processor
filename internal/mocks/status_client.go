// Code generated by MockGen. DO NOT EDIT.
// Source: status.go
//
// Generated by this command:
//
//	mockgen -source status.go -destination ../mocks/status_client.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	status "github.com/DIMO-Network/meta-transaction-processor/internal/status"
	gomock "go.uber.org/mock/gomock"
)

// MockProducer is a mock of Producer interface.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer.
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance.
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// Confirmed mocks base method.
func (m *MockProducer) Confirmed(msg *status.ConfirmedMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Confirmed", msg)
}

// Confirmed indicates an expected call of Confirmed.
func (mr *MockProducerMockRecorder) Confirmed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirmed", reflect.TypeOf((*MockProducer)(nil).Confirmed), msg)
}

// Failed mocks base method.
func (m *MockProducer) Failed(msg *status.FailedMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", msg)
}

// Failed indicates an expected call of Failed.
func (mr *MockProducerMockRecorder) Failed(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockProducer)(nil).Failed), msg)
}

// Mined mocks base method.
func (m *MockProducer) Mined(msg *status.MinedMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mined", msg)
}

// Mined indicates an expected call of Mined.
func (mr *MockProducerMockRecorder) Mined(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mined", reflect.TypeOf((*MockProducer)(nil).Mined), msg)
}

// Submitted mocks base method.
func (m *MockProducer) Submitted(msg *status.SubmittedMsg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Submitted", msg)
}

// Submitted indicates an expected call of Submitted.
func (mr *MockProducerMockRecorder) Submitted(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submitted", reflect.TypeOf((*MockProducer)(nil).Submitted), msg)
}
