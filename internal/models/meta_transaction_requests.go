// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MetaTransactionRequest is an object representing the database table.
type MetaTransactionRequest struct {
	ID                   string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	Nonce                types.NullDecimal `boil:"nonce" json:"nonce,omitempty" toml:"nonce" yaml:"nonce,omitempty"`
	GasPrice             types.NullDecimal `boil:"gas_price" json:"gas_price,omitempty" toml:"gas_price" yaml:"gas_price,omitempty"`
	To                   []byte            `boil:"to" json:"to" toml:"to" yaml:"to"`
	Data                 []byte            `boil:"data" json:"data" toml:"data" yaml:"data"`
	Hash                 null.Bytes        `boil:"hash" json:"hash,omitempty" toml:"hash" yaml:"hash,omitempty"`
	SubmittedBlockNumber types.NullDecimal `boil:"submitted_block_number" json:"submitted_block_number,omitempty" toml:"submitted_block_number" yaml:"submitted_block_number,omitempty"`
	SubmittedBlockHash   null.Bytes        `boil:"submitted_block_hash" json:"submitted_block_hash,omitempty" toml:"submitted_block_hash" yaml:"submitted_block_hash,omitempty"`
	MinedBlockNumber     types.NullDecimal `boil:"mined_block_number" json:"mined_block_number,omitempty" toml:"mined_block_number" yaml:"mined_block_number,omitempty"`
	MinedBlockHash       null.Bytes        `boil:"mined_block_hash" json:"mined_block_hash,omitempty" toml:"mined_block_hash" yaml:"mined_block_hash,omitempty"`
	CreatedAt            time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	BoostedBlockNumber   types.NullDecimal `boil:"boosted_block_number" json:"boosted_block_number,omitempty" toml:"boosted_block_number" yaml:"boosted_block_number,omitempty"`
	BoostedBlockHash     null.Bytes        `boil:"boosted_block_hash" json:"boosted_block_hash,omitempty" toml:"boosted_block_hash" yaml:"boosted_block_hash,omitempty"`
	WalletIndex          int               `boil:"wallet_index" json:"wallet_index" toml:"wallet_index" yaml:"wallet_index"`

	R *metaTransactionRequestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L metaTransactionRequestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MetaTransactionRequestColumns = struct {
	ID                   string
	Nonce                string
	GasPrice             string
	To                   string
	Data                 string
	Hash                 string
	SubmittedBlockNumber string
	SubmittedBlockHash   string
	MinedBlockNumber     string
	MinedBlockHash       string
	CreatedAt            string
	UpdatedAt            string
	BoostedBlockNumber   string
	BoostedBlockHash     string
	WalletIndex          string
}{
	ID:                   "id",
	Nonce:                "nonce",
	GasPrice:             "gas_price",
	To:                   "to",
	Data:                 "data",
	Hash:                 "hash",
	SubmittedBlockNumber: "submitted_block_number",
	SubmittedBlockHash:   "submitted_block_hash",
	MinedBlockNumber:     "mined_block_number",
	MinedBlockHash:       "mined_block_hash",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	BoostedBlockNumber:   "boosted_block_number",
	BoostedBlockHash:     "boosted_block_hash",
	WalletIndex:          "wallet_index",
}

var MetaTransactionRequestTableColumns = struct {
	ID                   string
	Nonce                string
	GasPrice             string
	To                   string
	Data                 string
	Hash                 string
	SubmittedBlockNumber string
	SubmittedBlockHash   string
	MinedBlockNumber     string
	MinedBlockHash       string
	CreatedAt            string
	UpdatedAt            string
	BoostedBlockNumber   string
	BoostedBlockHash     string
	WalletIndex          string
}{
	ID:                   "meta_transaction_requests.id",
	Nonce:                "meta_transaction_requests.nonce",
	GasPrice:             "meta_transaction_requests.gas_price",
	To:                   "meta_transaction_requests.to",
	Data:                 "meta_transaction_requests.data",
	Hash:                 "meta_transaction_requests.hash",
	SubmittedBlockNumber: "meta_transaction_requests.submitted_block_number",
	SubmittedBlockHash:   "meta_transaction_requests.submitted_block_hash",
	MinedBlockNumber:     "meta_transaction_requests.mined_block_number",
	MinedBlockHash:       "meta_transaction_requests.mined_block_hash",
	CreatedAt:            "meta_transaction_requests.created_at",
	UpdatedAt:            "meta_transaction_requests.updated_at",
	BoostedBlockNumber:   "meta_transaction_requests.boosted_block_number",
	BoostedBlockHash:     "meta_transaction_requests.boosted_block_hash",
	WalletIndex:          "meta_transaction_requests.wallet_index",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MetaTransactionRequestWhere = struct {
	ID                   whereHelperstring
	Nonce                whereHelpertypes_NullDecimal
	GasPrice             whereHelpertypes_NullDecimal
	To                   whereHelper__byte
	Data                 whereHelper__byte
	Hash                 whereHelpernull_Bytes
	SubmittedBlockNumber whereHelpertypes_NullDecimal
	SubmittedBlockHash   whereHelpernull_Bytes
	MinedBlockNumber     whereHelpertypes_NullDecimal
	MinedBlockHash       whereHelpernull_Bytes
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	BoostedBlockNumber   whereHelpertypes_NullDecimal
	BoostedBlockHash     whereHelpernull_Bytes
	WalletIndex          whereHelperint
}{
	ID:                   whereHelperstring{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"id\""},
	Nonce:                whereHelpertypes_NullDecimal{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"nonce\""},
	GasPrice:             whereHelpertypes_NullDecimal{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"gas_price\""},
	To:                   whereHelper__byte{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"to\""},
	Data:                 whereHelper__byte{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"data\""},
	Hash:                 whereHelpernull_Bytes{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"hash\""},
	SubmittedBlockNumber: whereHelpertypes_NullDecimal{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"submitted_block_number\""},
	SubmittedBlockHash:   whereHelpernull_Bytes{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"submitted_block_hash\""},
	MinedBlockNumber:     whereHelpertypes_NullDecimal{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"mined_block_number\""},
	MinedBlockHash:       whereHelpernull_Bytes{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"mined_block_hash\""},
	CreatedAt:            whereHelpertime_Time{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"updated_at\""},
	BoostedBlockNumber:   whereHelpertypes_NullDecimal{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"boosted_block_number\""},
	BoostedBlockHash:     whereHelpernull_Bytes{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"boosted_block_hash\""},
	WalletIndex:          whereHelperint{field: "\"meta_transaction_processor\".\"meta_transaction_requests\".\"wallet_index\""},
}

// MetaTransactionRequestRels is where relationship names are stored.
var MetaTransactionRequestRels = struct {
}{}

// metaTransactionRequestR is where relationships are stored.
type metaTransactionRequestR struct {
}

// NewStruct creates a new relationship struct
func (*metaTransactionRequestR) NewStruct() *metaTransactionRequestR {
	return &metaTransactionRequestR{}
}

// metaTransactionRequestL is where Load methods for each relationship are stored.
type metaTransactionRequestL struct{}

var (
	metaTransactionRequestAllColumns            = []string{"id", "nonce", "gas_price", "to", "data", "hash", "submitted_block_number", "submitted_block_hash", "mined_block_number", "mined_block_hash", "created_at", "updated_at", "boosted_block_number", "boosted_block_hash", "wallet_index"}
	metaTransactionRequestColumnsWithoutDefault = []string{"id", "to", "data", "wallet_index"}
	metaTransactionRequestColumnsWithDefault    = []string{"nonce", "gas_price", "hash", "submitted_block_number", "submitted_block_hash", "mined_block_number", "mined_block_hash", "created_at", "updated_at", "boosted_block_number", "boosted_block_hash"}
	metaTransactionRequestPrimaryKeyColumns     = []string{"id"}
	metaTransactionRequestGeneratedColumns      = []string{}
)

type (
	// MetaTransactionRequestSlice is an alias for a slice of pointers to MetaTransactionRequest.
	// This should almost always be used instead of []MetaTransactionRequest.
	MetaTransactionRequestSlice []*MetaTransactionRequest
	// MetaTransactionRequestHook is the signature for custom MetaTransactionRequest hook methods
	MetaTransactionRequestHook func(context.Context, boil.ContextExecutor, *MetaTransactionRequest) error

	metaTransactionRequestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metaTransactionRequestType                 = reflect.TypeOf(&MetaTransactionRequest{})
	metaTransactionRequestMapping              = queries.MakeStructMapping(metaTransactionRequestType)
	metaTransactionRequestPrimaryKeyMapping, _ = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, metaTransactionRequestPrimaryKeyColumns)
	metaTransactionRequestInsertCacheMut       sync.RWMutex
	metaTransactionRequestInsertCache          = make(map[string]insertCache)
	metaTransactionRequestUpdateCacheMut       sync.RWMutex
	metaTransactionRequestUpdateCache          = make(map[string]updateCache)
	metaTransactionRequestUpsertCacheMut       sync.RWMutex
	metaTransactionRequestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var metaTransactionRequestAfterSelectMu sync.Mutex
var metaTransactionRequestAfterSelectHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeInsertMu sync.Mutex
var metaTransactionRequestBeforeInsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterInsertMu sync.Mutex
var metaTransactionRequestAfterInsertHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpdateMu sync.Mutex
var metaTransactionRequestBeforeUpdateHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpdateMu sync.Mutex
var metaTransactionRequestAfterUpdateHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeDeleteMu sync.Mutex
var metaTransactionRequestBeforeDeleteHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterDeleteMu sync.Mutex
var metaTransactionRequestAfterDeleteHooks []MetaTransactionRequestHook

var metaTransactionRequestBeforeUpsertMu sync.Mutex
var metaTransactionRequestBeforeUpsertHooks []MetaTransactionRequestHook
var metaTransactionRequestAfterUpsertMu sync.Mutex
var metaTransactionRequestAfterUpsertHooks []MetaTransactionRequestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MetaTransactionRequest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MetaTransactionRequest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MetaTransactionRequest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MetaTransactionRequest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MetaTransactionRequest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MetaTransactionRequest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MetaTransactionRequest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MetaTransactionRequest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MetaTransactionRequest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range metaTransactionRequestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetaTransactionRequestHook registers your hook function for all future operations.
func AddMetaTransactionRequestHook(hookPoint boil.HookPoint, metaTransactionRequestHook MetaTransactionRequestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		metaTransactionRequestAfterSelectMu.Lock()
		metaTransactionRequestAfterSelectHooks = append(metaTransactionRequestAfterSelectHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		metaTransactionRequestBeforeInsertMu.Lock()
		metaTransactionRequestBeforeInsertHooks = append(metaTransactionRequestBeforeInsertHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		metaTransactionRequestAfterInsertMu.Lock()
		metaTransactionRequestAfterInsertHooks = append(metaTransactionRequestAfterInsertHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		metaTransactionRequestBeforeUpdateMu.Lock()
		metaTransactionRequestBeforeUpdateHooks = append(metaTransactionRequestBeforeUpdateHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		metaTransactionRequestAfterUpdateMu.Lock()
		metaTransactionRequestAfterUpdateHooks = append(metaTransactionRequestAfterUpdateHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		metaTransactionRequestBeforeDeleteMu.Lock()
		metaTransactionRequestBeforeDeleteHooks = append(metaTransactionRequestBeforeDeleteHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		metaTransactionRequestAfterDeleteMu.Lock()
		metaTransactionRequestAfterDeleteHooks = append(metaTransactionRequestAfterDeleteHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		metaTransactionRequestBeforeUpsertMu.Lock()
		metaTransactionRequestBeforeUpsertHooks = append(metaTransactionRequestBeforeUpsertHooks, metaTransactionRequestHook)
		metaTransactionRequestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		metaTransactionRequestAfterUpsertMu.Lock()
		metaTransactionRequestAfterUpsertHooks = append(metaTransactionRequestAfterUpsertHooks, metaTransactionRequestHook)
		metaTransactionRequestAfterUpsertMu.Unlock()
	}
}

// One returns a single metaTransactionRequest record from the query.
func (q metaTransactionRequestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MetaTransactionRequest, error) {
	o := &MetaTransactionRequest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for meta_transaction_requests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MetaTransactionRequest records from the query.
func (q metaTransactionRequestQuery) All(ctx context.Context, exec boil.ContextExecutor) (MetaTransactionRequestSlice, error) {
	var o []*MetaTransactionRequest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MetaTransactionRequest slice")
	}

	if len(metaTransactionRequestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MetaTransactionRequest records in the query.
func (q metaTransactionRequestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count meta_transaction_requests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q metaTransactionRequestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if meta_transaction_requests exists")
	}

	return count > 0, nil
}

// MetaTransactionRequests retrieves all the records using an executor.
func MetaTransactionRequests(mods ...qm.QueryMod) metaTransactionRequestQuery {
	mods = append(mods, qm.From("\"meta_transaction_processor\".\"meta_transaction_requests\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"meta_transaction_processor\".\"meta_transaction_requests\".*"})
	}

	return metaTransactionRequestQuery{q}
}

// FindMetaTransactionRequest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetaTransactionRequest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MetaTransactionRequest, error) {
	metaTransactionRequestObj := &MetaTransactionRequest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"meta_transaction_processor\".\"meta_transaction_requests\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, metaTransactionRequestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from meta_transaction_requests")
	}

	if err = metaTransactionRequestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return metaTransactionRequestObj, err
	}

	return metaTransactionRequestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MetaTransactionRequest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	metaTransactionRequestInsertCacheMut.RLock()
	cache, cached := metaTransactionRequestInsertCache[key]
	metaTransactionRequestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"meta_transaction_processor\".\"meta_transaction_requests\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"meta_transaction_processor\".\"meta_transaction_requests\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestInsertCacheMut.Lock()
		metaTransactionRequestInsertCache[key] = cache
		metaTransactionRequestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MetaTransactionRequest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MetaTransactionRequest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	metaTransactionRequestUpdateCacheMut.RLock()
	cache, cached := metaTransactionRequestUpdateCache[key]
	metaTransactionRequestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update meta_transaction_requests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"meta_transaction_processor\".\"meta_transaction_requests\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metaTransactionRequestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, append(wl, metaTransactionRequestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update meta_transaction_requests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpdateCacheMut.Lock()
		metaTransactionRequestUpdateCache[key] = cache
		metaTransactionRequestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q metaTransactionRequestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for meta_transaction_requests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetaTransactionRequestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"meta_transaction_processor\".\"meta_transaction_requests\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, metaTransactionRequestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all metaTransactionRequest")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MetaTransactionRequest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no meta_transaction_requests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metaTransactionRequestColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metaTransactionRequestUpsertCacheMut.RLock()
	cache, cached := metaTransactionRequestUpsertCache[key]
	metaTransactionRequestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestColumnsWithDefault,
			metaTransactionRequestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			metaTransactionRequestAllColumns,
			metaTransactionRequestPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert meta_transaction_requests, could not build update column list")
		}

		ret := strmangle.SetComplement(metaTransactionRequestAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(metaTransactionRequestPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert meta_transaction_requests, could not build conflict column list")
			}

			conflict = make([]string, len(metaTransactionRequestPrimaryKeyColumns))
			copy(conflict, metaTransactionRequestPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"meta_transaction_processor\".\"meta_transaction_requests\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metaTransactionRequestType, metaTransactionRequestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert meta_transaction_requests")
	}

	if !cached {
		metaTransactionRequestUpsertCacheMut.Lock()
		metaTransactionRequestUpsertCache[key] = cache
		metaTransactionRequestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MetaTransactionRequest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MetaTransactionRequest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MetaTransactionRequest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metaTransactionRequestPrimaryKeyMapping)
	sql := "DELETE FROM \"meta_transaction_processor\".\"meta_transaction_requests\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for meta_transaction_requests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q metaTransactionRequestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no metaTransactionRequestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from meta_transaction_requests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetaTransactionRequestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(metaTransactionRequestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"meta_transaction_processor\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from metaTransactionRequest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for meta_transaction_requests")
	}

	if len(metaTransactionRequestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MetaTransactionRequest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMetaTransactionRequest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetaTransactionRequestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MetaTransactionRequestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metaTransactionRequestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"meta_transaction_processor\".\"meta_transaction_requests\".* FROM \"meta_transaction_processor\".\"meta_transaction_requests\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, metaTransactionRequestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MetaTransactionRequestSlice")
	}

	*o = slice

	return nil
}

// MetaTransactionRequestExists checks if the MetaTransactionRequest row exists.
func MetaTransactionRequestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"meta_transaction_processor\".\"meta_transaction_requests\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if meta_transaction_requests exists")
	}

	return exists, nil
}

// Exists checks if the MetaTransactionRequest row exists.
func (o *MetaTransactionRequest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MetaTransactionRequestExists(ctx, exec, o.ID)
}
