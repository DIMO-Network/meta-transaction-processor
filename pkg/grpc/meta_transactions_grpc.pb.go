// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: pkg/grpc/meta_transactions.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetaTransactionService_CleanStuckMetaTransactions_FullMethodName = "/metatransactions.MetaTransactionService/CleanStuckMetaTransactions"
)

// MetaTransactionServiceClient is the client API for MetaTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaTransactionServiceClient interface {
	CleanStuckMetaTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CleanStuckMetaTransactionsResponse, error)
}

type metaTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaTransactionServiceClient(cc grpc.ClientConnInterface) MetaTransactionServiceClient {
	return &metaTransactionServiceClient{cc}
}

func (c *metaTransactionServiceClient) CleanStuckMetaTransactions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CleanStuckMetaTransactionsResponse, error) {
	out := new(CleanStuckMetaTransactionsResponse)
	err := c.cc.Invoke(ctx, MetaTransactionService_CleanStuckMetaTransactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaTransactionServiceServer is the server API for MetaTransactionService service.
// All implementations must embed UnimplementedMetaTransactionServiceServer
// for forward compatibility
type MetaTransactionServiceServer interface {
	CleanStuckMetaTransactions(context.Context, *emptypb.Empty) (*CleanStuckMetaTransactionsResponse, error)
	mustEmbedUnimplementedMetaTransactionServiceServer()
}

// UnimplementedMetaTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaTransactionServiceServer struct {
}

func (UnimplementedMetaTransactionServiceServer) CleanStuckMetaTransactions(context.Context, *emptypb.Empty) (*CleanStuckMetaTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanStuckMetaTransactions not implemented")
}
func (UnimplementedMetaTransactionServiceServer) mustEmbedUnimplementedMetaTransactionServiceServer() {
}

// UnsafeMetaTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaTransactionServiceServer will
// result in compilation errors.
type UnsafeMetaTransactionServiceServer interface {
	mustEmbedUnimplementedMetaTransactionServiceServer()
}

func RegisterMetaTransactionServiceServer(s grpc.ServiceRegistrar, srv MetaTransactionServiceServer) {
	s.RegisterService(&MetaTransactionService_ServiceDesc, srv)
}

func _MetaTransactionService_CleanStuckMetaTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaTransactionServiceServer).CleanStuckMetaTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaTransactionService_CleanStuckMetaTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaTransactionServiceServer).CleanStuckMetaTransactions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaTransactionService_ServiceDesc is the grpc.ServiceDesc for MetaTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metatransactions.MetaTransactionService",
	HandlerType: (*MetaTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanStuckMetaTransactions",
			Handler:    _MetaTransactionService_CleanStuckMetaTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/meta_transactions.proto",
}
